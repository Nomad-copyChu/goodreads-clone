type Book {
  id: ID!
  title: String!
  authors: [Author!]!
  thumbnail: String!
  contents: String
  datetime: String
  isbn: String!
  price: Int
  publisher: String
  saleStatus: String!
  wantCount: Int!
  readingCount: Int!
  readCount: Int!
  comments: [Comment!]
  gernes: [Gerne!]
  totalRating: Int!
  ratedUserNum: Int!
  addUser: User
  createdAt: String!
  updatedAt: String!
}

type Author {
  id: ID!
  name: String!
  born: String
  died: String
  gernes: [Gerne!]
  description: String
  photo: String
  books: [Book!]
  quotes: [Quote!]
  createdAt: String!
  updatedAt: String!
}

type Gerne {
  id: ID!
  term: String!
  books: [Book!]
  authors: [Author!]
  createdAt: String!
  updatedAt: String!
}

type Quote {
  id: ID!
  term: String
  author: Author
  tags: [Tag!]
  likesCount: Int
  createdAt: String!
  updatedAt: String!
}

type User {
  id: ID!
  email: String!
  password: String!
  username: String!
  profilePhoto: String!
  profile: Profile
  isAdmin: Boolean
  ratings: [Rating!]
  ratingBooks: [Book]
  bookAvgRating: Float
  bookComments: [Comment]
  shelves: [Shelf]
  likeQuotes: [Quote]
  displays: [Display]
  createdAt: String!
  updatedAt: String!
}

type Rating {
  id: ID!
  user: User!
  book: Book!
  count: Int!
  createdAt: String!
  updatedAt: String!
}

type Display {
  id: ID!
  user: User
  book: Book
  shelves: [Shelf]
  createdAt: String!
  updatedAt: String!
}

type Shelf {
  id: ID!
  user: User
  name: String!
  displays: [Display]
  createdAt: String!
  updatedAt: String!
}

type Profile {
  id: ID!
  username: String!
  age: Int
  gender: Gender
  bio: String
  interests: String
  favoriteBook: String
  createdAt: String!
  updatedAt: String!
}

enum Gender {
  Male
  Female
}

type Tag {
  id: ID!
  quotes: [Quote]
  term: String!
  createdAt: String!
  updatedAt: String!
}

type Comment {
  id: ID!
  book: Book
  text: String!
  createdAt: String!
  updatedAt: String!
}

scalar Upload

type Query {
  uploads: [File]
  search(keyword: String!): [SearchResult]
  getAuthor(name: String): Author
  getAuthors(gerne: String): [Author]!
  getBooks(gerne: String, random: Boolean): [Book!]!
  getDisplays: [Display]!
  getShelves: [Shelf]!
  getUser(userId: ID!): User!
}

type File {
  filename: String
  mimetype: String
  encoding: String
}

union SearchResult = User | Book | Author

type Mutation {
  addAuthor(name: String!, born: String, died: String, gernes: [String], description: String, photo: String): Author!
  addBook(bookInfos: AddBookInfos, authors: [addBookAuthorInfos]): Book!
  rateBook(bookId: ID!, count: Int!): Rating!
  commentBook(bookId: ID!, text: String!): Comment!
  deleteComment(commentId: ID!): Boolean
  addToShelf(shelfName: String!, bookId: ID!): Display!
  subFromShelf(shelfName: String!, bookId: ID!): Display!
  multipleUpload(files: [Upload!]!): [File!]!
  singleUpload(file: Upload!): String!
  addQuote(term: String!, tags: [String], authorId: ID!): Quote!
  deleteQuote(quoteId: ID!): Quote!
  createShelf(name: String!): Shelf!
  deleteShelf(shelfId: ID!): Shelf!
  editShelf(shelfId: ID!, name: String!): Shelf!
  createUser(email: String!, password: String!, username: String!): String!
  deleteUser: User!
  githubLogin(code: String): GithubLoginResponse!
  login(email: String!, password: String!): String!
}

input AddBookInfos {
  title: String!
  gernes: [String]
  thumbnail: String!
  contents: String!
  datetime: String
  isbn: String!
  price: Int
  publisher: String
  saleStatus: String
}

input addBookAuthorInfos {
  name: String!
  description: String
  photo: String
}

type GithubLoginResponse {
  token: String!
  isFirst: Boolean!
}
