type Book {
  id: ID!
  title: String!
  authors: [Author!]!
  thumbnail: String!
  contents: String
  datetime: String
  isbn: String!
  price: Int
  publisher: String
  saleStatus: String
  wantCount: Int!
  readingCount: Int!
  readCount: Int!
  comments: [Comment!]
  gernes: [Gerne!]
  totalRating: Float!
  ratedUserNum: Int!
  avgRating: Float!
  addUser: User
  createdAt: String!
  updatedAt: String!
}

type Author {
  id: ID!
  name: String!
  born: String
  died: String
  gernes: [Gerne!]
  description: String
  photo: String
  books: [Book!]
  quotes: [Quote!]
  comments: [AuthorComment!]
  createdAt: String!
  updatedAt: String!
}

type Gerne {
  id: ID!
  term: String!
  books: [Book!]
  authors: [Author!]
  booksCount: Int!
  createdAt: String!
  updatedAt: String!
}

type Quote {
  id: ID!
  term: String
  author: Author
  tags: [Tag!]
  likesCount: Int
  createdAt: String!
  updatedAt: String!
}

type User {
  id: ID!
  email: String!
  password: String!
  username: String!
  profilePhoto: String!
  profile: Profile
  isAdmin: Boolean
  ratings: [Rating!]
  ratingBooks: [Book]
  bookAvgRating: String
  bookComments: [Comment]
  shelves: [Shelf]
  likeQuotes: [Quote]
  displays: [Display]
  createdAt: String!
  updatedAt: String!
}

type Rating {
  id: ID!
  user: User!
  book: Book!
  count: Float!
  createdAt: String!
  updatedAt: String!
}

type Display {
  id: ID!
  user: User
  book: Book
  shelves: [Shelf]
  createdAt: String!
  updatedAt: String!
}

type Shelf {
  id: ID!
  user: User
  name: String!
  displays: [Display]
  createdAt: String!
  updatedAt: String!
}

type Profile {
  id: ID!
  user: User!
  age: Int
  gender: Gender
  bio: String
  interests: String
  favoriteBook: String
  createdAt: String!
  updatedAt: String!
}

enum Gender {
  MALE
  FEMALE
}

type Tag {
  id: ID!
  quotes: [Quote]
  term: String!
  createdAt: String!
  updatedAt: String!
}

type Comment {
  id: ID!
  user: User
  book: Book
  text: String!
  createdAt: String!
  updatedAt: String!
}

type AuthorComment {
  id: ID!
  author: Author
  user: User
  text: String!
  createdAt: String!
  updatedAt: String!
}

scalar Upload

type Query {
  uploads: [File]
  search(keyword: String!): [SearchResult]
  getAuthor(id: ID!): Author
  getAuthorTwo: [Author]
  getAuthors(gerne: String): [Author]!
  getAuthorsWithName(authors: [String!]!): [getAuthorsWithNameResponse]
  getBook(id: ID!): Book!
  getBooks(gerne: String, random: Boolean): [Book!]!
  getDisplays: [Display]!
  getGernes: [Gerne]
  getQuotes: [Quote]
  checkRating(bookId: ID!): Rating
  getShelves: [Shelf]!
  getUser: User
}

type File {
  filename: String
  mimetype: String
  encoding: String
}

union SearchResult = User | Book | Author

type Mutation {
  editProfile(age: Int, gender: Gender, bio: String, interests: String, favoriteBook: String): Profile!
  addAuthor(name: String!, born: String, died: String, gernes: [String], description: String, photo: String): Author!
  editAuthor(authorId: ID!, editAuthorArgs: EditAuthorArgs): Author
  addBook(bookInfos: AddBookInfos, authors: [addBookAuthorInfos]): Book!
  deleteBook(bookId: ID!): Book!
  commentAuthor(authorId: ID!, text: String!): AuthorComment
  commentBook(bookId: ID!, text: String!): Comment!
  deleteComment(commentId: ID!): Boolean
  addToShelf(shelfName: String!, bookId: ID!): Display!
  subFromShelf(shelfName: String!, bookId: ID!): Display!
  multipleUpload(files: [Upload!]!): [File!]!
  singleUpload(file: Upload!): String!
  addQuote(term: String!, tags: [String], authorId: ID!): Quote!
  deleteQuote(quoteId: ID!): Quote!
  rateBook(bookId: ID!, count: Float!): Rating!
  createShelf(name: String!): Shelf!
  deleteShelf(shelfId: ID!): Shelf!
  editShelf(shelfId: ID!, name: String!): Shelf!
  createUser(email: String!, password: String!, username: String!): String!
  deleteUser: User!
  githubLogin(code: String): GithubLoginResponse!
  login(email: String!, password: String!): String!
}

type EditAuthorArgs {
  name: String!
  born: String
  died: String
  gernes: [String!]
  description: String
}

type getAuthorsWithNameResponse {
  name: String!
  description: String
  photo: String
}

input AddBookInfos {
  title: String!
  gernes: [String]
  thumbnail: String!
  contents: String!
  datetime: String
  isbn: String!
  price: Int
  publisher: String
  saleStatus: String
}

input addBookAuthorInfos {
  name: String!
  description: String
  photo: String
}

type GithubLoginResponse {
  token: String!
  isFirst: Boolean!
}
