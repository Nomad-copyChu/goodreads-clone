// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateAuthor {
  count: Int!
}

type AggregateBook {
  count: Int!
}

type AggregateComment {
  count: Int!
}

type AggregateDisplay {
  count: Int!
}

type AggregateGerne {
  count: Int!
}

type AggregateProfile {
  count: Int!
}

type AggregateQuote {
  count: Int!
}

type AggregateShelf {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Author {
  id: ID!
  name: String!
  Born: DateTime
  Died: DateTime
  gernes(where: GerneWhereInput, orderBy: GerneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gerne!]
  description: String
  photos: [String!]!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  Quotes(where: QuoteWhereInput, orderBy: QuoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quote!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthorConnection {
  pageInfo: PageInfo!
  edges: [AuthorEdge]!
  aggregate: AggregateAuthor!
}

input AuthorCreateInput {
  id: ID
  name: String!
  Born: DateTime
  Died: DateTime
  gernes: GerneCreateManyWithoutAuthorsInput
  description: String
  photos: AuthorCreatephotosInput
  books: BookCreateManyWithoutAuthorInput
  Quotes: QuoteCreateManyWithoutAuthorInput
}

input AuthorCreateManyWithoutGernesInput {
  create: [AuthorCreateWithoutGernesInput!]
  connect: [AuthorWhereUniqueInput!]
}

input AuthorCreateOneWithoutBooksInput {
  create: AuthorCreateWithoutBooksInput
  connect: AuthorWhereUniqueInput
}

input AuthorCreateOneWithoutQuotesInput {
  create: AuthorCreateWithoutQuotesInput
  connect: AuthorWhereUniqueInput
}

input AuthorCreatephotosInput {
  set: [String!]
}

input AuthorCreateWithoutBooksInput {
  id: ID
  name: String!
  Born: DateTime
  Died: DateTime
  gernes: GerneCreateManyWithoutAuthorsInput
  description: String
  photos: AuthorCreatephotosInput
  Quotes: QuoteCreateManyWithoutAuthorInput
}

input AuthorCreateWithoutGernesInput {
  id: ID
  name: String!
  Born: DateTime
  Died: DateTime
  description: String
  photos: AuthorCreatephotosInput
  books: BookCreateManyWithoutAuthorInput
  Quotes: QuoteCreateManyWithoutAuthorInput
}

input AuthorCreateWithoutQuotesInput {
  id: ID
  name: String!
  Born: DateTime
  Died: DateTime
  gernes: GerneCreateManyWithoutAuthorsInput
  description: String
  photos: AuthorCreatephotosInput
  books: BookCreateManyWithoutAuthorInput
}

type AuthorEdge {
  node: Author!
  cursor: String!
}

enum AuthorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  Born_ASC
  Born_DESC
  Died_ASC
  Died_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AuthorPreviousValues {
  id: ID!
  name: String!
  Born: DateTime
  Died: DateTime
  description: String
  photos: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AuthorScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  Born: DateTime
  Born_not: DateTime
  Born_in: [DateTime!]
  Born_not_in: [DateTime!]
  Born_lt: DateTime
  Born_lte: DateTime
  Born_gt: DateTime
  Born_gte: DateTime
  Died: DateTime
  Died_not: DateTime
  Died_in: [DateTime!]
  Died_not_in: [DateTime!]
  Died_lt: DateTime
  Died_lte: DateTime
  Died_gt: DateTime
  Died_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AuthorScalarWhereInput!]
  OR: [AuthorScalarWhereInput!]
  NOT: [AuthorScalarWhereInput!]
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  node: Author
  updatedFields: [String!]
  previousValues: AuthorPreviousValues
}

input AuthorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuthorWhereInput
  AND: [AuthorSubscriptionWhereInput!]
  OR: [AuthorSubscriptionWhereInput!]
  NOT: [AuthorSubscriptionWhereInput!]
}

input AuthorUpdateInput {
  name: String
  Born: DateTime
  Died: DateTime
  gernes: GerneUpdateManyWithoutAuthorsInput
  description: String
  photos: AuthorUpdatephotosInput
  books: BookUpdateManyWithoutAuthorInput
  Quotes: QuoteUpdateManyWithoutAuthorInput
}

input AuthorUpdateManyDataInput {
  name: String
  Born: DateTime
  Died: DateTime
  description: String
  photos: AuthorUpdatephotosInput
}

input AuthorUpdateManyMutationInput {
  name: String
  Born: DateTime
  Died: DateTime
  description: String
  photos: AuthorUpdatephotosInput
}

input AuthorUpdateManyWithoutGernesInput {
  create: [AuthorCreateWithoutGernesInput!]
  delete: [AuthorWhereUniqueInput!]
  connect: [AuthorWhereUniqueInput!]
  set: [AuthorWhereUniqueInput!]
  disconnect: [AuthorWhereUniqueInput!]
  update: [AuthorUpdateWithWhereUniqueWithoutGernesInput!]
  upsert: [AuthorUpsertWithWhereUniqueWithoutGernesInput!]
  deleteMany: [AuthorScalarWhereInput!]
  updateMany: [AuthorUpdateManyWithWhereNestedInput!]
}

input AuthorUpdateManyWithWhereNestedInput {
  where: AuthorScalarWhereInput!
  data: AuthorUpdateManyDataInput!
}

input AuthorUpdateOneRequiredWithoutBooksInput {
  create: AuthorCreateWithoutBooksInput
  update: AuthorUpdateWithoutBooksDataInput
  upsert: AuthorUpsertWithoutBooksInput
  connect: AuthorWhereUniqueInput
}

input AuthorUpdateOneWithoutQuotesInput {
  create: AuthorCreateWithoutQuotesInput
  update: AuthorUpdateWithoutQuotesDataInput
  upsert: AuthorUpsertWithoutQuotesInput
  delete: Boolean
  disconnect: Boolean
  connect: AuthorWhereUniqueInput
}

input AuthorUpdatephotosInput {
  set: [String!]
}

input AuthorUpdateWithoutBooksDataInput {
  name: String
  Born: DateTime
  Died: DateTime
  gernes: GerneUpdateManyWithoutAuthorsInput
  description: String
  photos: AuthorUpdatephotosInput
  Quotes: QuoteUpdateManyWithoutAuthorInput
}

input AuthorUpdateWithoutGernesDataInput {
  name: String
  Born: DateTime
  Died: DateTime
  description: String
  photos: AuthorUpdatephotosInput
  books: BookUpdateManyWithoutAuthorInput
  Quotes: QuoteUpdateManyWithoutAuthorInput
}

input AuthorUpdateWithoutQuotesDataInput {
  name: String
  Born: DateTime
  Died: DateTime
  gernes: GerneUpdateManyWithoutAuthorsInput
  description: String
  photos: AuthorUpdatephotosInput
  books: BookUpdateManyWithoutAuthorInput
}

input AuthorUpdateWithWhereUniqueWithoutGernesInput {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateWithoutGernesDataInput!
}

input AuthorUpsertWithoutBooksInput {
  update: AuthorUpdateWithoutBooksDataInput!
  create: AuthorCreateWithoutBooksInput!
}

input AuthorUpsertWithoutQuotesInput {
  update: AuthorUpdateWithoutQuotesDataInput!
  create: AuthorCreateWithoutQuotesInput!
}

input AuthorUpsertWithWhereUniqueWithoutGernesInput {
  where: AuthorWhereUniqueInput!
  update: AuthorUpdateWithoutGernesDataInput!
  create: AuthorCreateWithoutGernesInput!
}

input AuthorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  Born: DateTime
  Born_not: DateTime
  Born_in: [DateTime!]
  Born_not_in: [DateTime!]
  Born_lt: DateTime
  Born_lte: DateTime
  Born_gt: DateTime
  Born_gte: DateTime
  Died: DateTime
  Died_not: DateTime
  Died_in: [DateTime!]
  Died_not_in: [DateTime!]
  Died_lt: DateTime
  Died_lte: DateTime
  Died_gt: DateTime
  Died_gte: DateTime
  gernes_every: GerneWhereInput
  gernes_some: GerneWhereInput
  gernes_none: GerneWhereInput
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
  Quotes_every: QuoteWhereInput
  Quotes_some: QuoteWhereInput
  Quotes_none: QuoteWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
}

input AuthorWhereUniqueInput {
  id: ID
  name: String
}

type BatchPayload {
  count: Long!
}

type Book {
  id: ID!
  title: String!
  author: Author!
  gernes(where: GerneWhereInput, orderBy: GerneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gerne!]
  covorImage: String!
  description: String!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  ISBN: String!
  wantCount: Int!
  readingCount: Int!
  readCount: Int!
  avgRating: Float!
  pages: Int
  avgRatings: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type BookConnection {
  pageInfo: PageInfo!
  edges: [BookEdge]!
  aggregate: AggregateBook!
}

input BookCreateInput {
  id: ID
  title: String!
  author: AuthorCreateOneWithoutBooksInput!
  gernes: GerneCreateManyWithoutBooksInput
  covorImage: String!
  description: String!
  comments: CommentCreateManyWithoutBookInput
  ISBN: String!
  wantCount: Int!
  readingCount: Int!
  readCount: Int!
  avgRating: Float!
  pages: Int
  avgRatings: Int
}

input BookCreateManyInput {
  create: [BookCreateInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateManyWithoutAuthorInput {
  create: [BookCreateWithoutAuthorInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateManyWithoutGernesInput {
  create: [BookCreateWithoutGernesInput!]
  connect: [BookWhereUniqueInput!]
}

input BookCreateOneInput {
  create: BookCreateInput
  connect: BookWhereUniqueInput
}

input BookCreateOneWithoutCommentsInput {
  create: BookCreateWithoutCommentsInput
  connect: BookWhereUniqueInput
}

input BookCreateWithoutAuthorInput {
  id: ID
  title: String!
  gernes: GerneCreateManyWithoutBooksInput
  covorImage: String!
  description: String!
  comments: CommentCreateManyWithoutBookInput
  ISBN: String!
  wantCount: Int!
  readingCount: Int!
  readCount: Int!
  avgRating: Float!
  pages: Int
  avgRatings: Int
}

input BookCreateWithoutCommentsInput {
  id: ID
  title: String!
  author: AuthorCreateOneWithoutBooksInput!
  gernes: GerneCreateManyWithoutBooksInput
  covorImage: String!
  description: String!
  ISBN: String!
  wantCount: Int!
  readingCount: Int!
  readCount: Int!
  avgRating: Float!
  pages: Int
  avgRatings: Int
}

input BookCreateWithoutGernesInput {
  id: ID
  title: String!
  author: AuthorCreateOneWithoutBooksInput!
  covorImage: String!
  description: String!
  comments: CommentCreateManyWithoutBookInput
  ISBN: String!
  wantCount: Int!
  readingCount: Int!
  readCount: Int!
  avgRating: Float!
  pages: Int
  avgRatings: Int
}

type BookEdge {
  node: Book!
  cursor: String!
}

enum BookOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  covorImage_ASC
  covorImage_DESC
  description_ASC
  description_DESC
  ISBN_ASC
  ISBN_DESC
  wantCount_ASC
  wantCount_DESC
  readingCount_ASC
  readingCount_DESC
  readCount_ASC
  readCount_DESC
  avgRating_ASC
  avgRating_DESC
  pages_ASC
  pages_DESC
  avgRatings_ASC
  avgRatings_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookPreviousValues {
  id: ID!
  title: String!
  covorImage: String!
  description: String!
  ISBN: String!
  wantCount: Int!
  readingCount: Int!
  readCount: Int!
  avgRating: Float!
  pages: Int
  avgRatings: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input BookScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  covorImage: String
  covorImage_not: String
  covorImage_in: [String!]
  covorImage_not_in: [String!]
  covorImage_lt: String
  covorImage_lte: String
  covorImage_gt: String
  covorImage_gte: String
  covorImage_contains: String
  covorImage_not_contains: String
  covorImage_starts_with: String
  covorImage_not_starts_with: String
  covorImage_ends_with: String
  covorImage_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  ISBN: String
  ISBN_not: String
  ISBN_in: [String!]
  ISBN_not_in: [String!]
  ISBN_lt: String
  ISBN_lte: String
  ISBN_gt: String
  ISBN_gte: String
  ISBN_contains: String
  ISBN_not_contains: String
  ISBN_starts_with: String
  ISBN_not_starts_with: String
  ISBN_ends_with: String
  ISBN_not_ends_with: String
  wantCount: Int
  wantCount_not: Int
  wantCount_in: [Int!]
  wantCount_not_in: [Int!]
  wantCount_lt: Int
  wantCount_lte: Int
  wantCount_gt: Int
  wantCount_gte: Int
  readingCount: Int
  readingCount_not: Int
  readingCount_in: [Int!]
  readingCount_not_in: [Int!]
  readingCount_lt: Int
  readingCount_lte: Int
  readingCount_gt: Int
  readingCount_gte: Int
  readCount: Int
  readCount_not: Int
  readCount_in: [Int!]
  readCount_not_in: [Int!]
  readCount_lt: Int
  readCount_lte: Int
  readCount_gt: Int
  readCount_gte: Int
  avgRating: Float
  avgRating_not: Float
  avgRating_in: [Float!]
  avgRating_not_in: [Float!]
  avgRating_lt: Float
  avgRating_lte: Float
  avgRating_gt: Float
  avgRating_gte: Float
  pages: Int
  pages_not: Int
  pages_in: [Int!]
  pages_not_in: [Int!]
  pages_lt: Int
  pages_lte: Int
  pages_gt: Int
  pages_gte: Int
  avgRatings: Int
  avgRatings_not: Int
  avgRatings_in: [Int!]
  avgRatings_not_in: [Int!]
  avgRatings_lt: Int
  avgRatings_lte: Int
  avgRatings_gt: Int
  avgRatings_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BookScalarWhereInput!]
  OR: [BookScalarWhereInput!]
  NOT: [BookScalarWhereInput!]
}

type BookSubscriptionPayload {
  mutation: MutationType!
  node: Book
  updatedFields: [String!]
  previousValues: BookPreviousValues
}

input BookSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookWhereInput
  AND: [BookSubscriptionWhereInput!]
  OR: [BookSubscriptionWhereInput!]
  NOT: [BookSubscriptionWhereInput!]
}

input BookUpdateDataInput {
  title: String
  author: AuthorUpdateOneRequiredWithoutBooksInput
  gernes: GerneUpdateManyWithoutBooksInput
  covorImage: String
  description: String
  comments: CommentUpdateManyWithoutBookInput
  ISBN: String
  wantCount: Int
  readingCount: Int
  readCount: Int
  avgRating: Float
  pages: Int
  avgRatings: Int
}

input BookUpdateInput {
  title: String
  author: AuthorUpdateOneRequiredWithoutBooksInput
  gernes: GerneUpdateManyWithoutBooksInput
  covorImage: String
  description: String
  comments: CommentUpdateManyWithoutBookInput
  ISBN: String
  wantCount: Int
  readingCount: Int
  readCount: Int
  avgRating: Float
  pages: Int
  avgRatings: Int
}

input BookUpdateManyDataInput {
  title: String
  covorImage: String
  description: String
  ISBN: String
  wantCount: Int
  readingCount: Int
  readCount: Int
  avgRating: Float
  pages: Int
  avgRatings: Int
}

input BookUpdateManyInput {
  create: [BookCreateInput!]
  update: [BookUpdateWithWhereUniqueNestedInput!]
  upsert: [BookUpsertWithWhereUniqueNestedInput!]
  delete: [BookWhereUniqueInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  deleteMany: [BookScalarWhereInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
}

input BookUpdateManyMutationInput {
  title: String
  covorImage: String
  description: String
  ISBN: String
  wantCount: Int
  readingCount: Int
  readCount: Int
  avgRating: Float
  pages: Int
  avgRatings: Int
}

input BookUpdateManyWithoutAuthorInput {
  create: [BookCreateWithoutAuthorInput!]
  delete: [BookWhereUniqueInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [BookScalarWhereInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
}

input BookUpdateManyWithoutGernesInput {
  create: [BookCreateWithoutGernesInput!]
  delete: [BookWhereUniqueInput!]
  connect: [BookWhereUniqueInput!]
  set: [BookWhereUniqueInput!]
  disconnect: [BookWhereUniqueInput!]
  update: [BookUpdateWithWhereUniqueWithoutGernesInput!]
  upsert: [BookUpsertWithWhereUniqueWithoutGernesInput!]
  deleteMany: [BookScalarWhereInput!]
  updateMany: [BookUpdateManyWithWhereNestedInput!]
}

input BookUpdateManyWithWhereNestedInput {
  where: BookScalarWhereInput!
  data: BookUpdateManyDataInput!
}

input BookUpdateOneInput {
  create: BookCreateInput
  update: BookUpdateDataInput
  upsert: BookUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: BookWhereUniqueInput
}

input BookUpdateOneWithoutCommentsInput {
  create: BookCreateWithoutCommentsInput
  update: BookUpdateWithoutCommentsDataInput
  upsert: BookUpsertWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: BookWhereUniqueInput
}

input BookUpdateWithoutAuthorDataInput {
  title: String
  gernes: GerneUpdateManyWithoutBooksInput
  covorImage: String
  description: String
  comments: CommentUpdateManyWithoutBookInput
  ISBN: String
  wantCount: Int
  readingCount: Int
  readCount: Int
  avgRating: Float
  pages: Int
  avgRatings: Int
}

input BookUpdateWithoutCommentsDataInput {
  title: String
  author: AuthorUpdateOneRequiredWithoutBooksInput
  gernes: GerneUpdateManyWithoutBooksInput
  covorImage: String
  description: String
  ISBN: String
  wantCount: Int
  readingCount: Int
  readCount: Int
  avgRating: Float
  pages: Int
  avgRatings: Int
}

input BookUpdateWithoutGernesDataInput {
  title: String
  author: AuthorUpdateOneRequiredWithoutBooksInput
  covorImage: String
  description: String
  comments: CommentUpdateManyWithoutBookInput
  ISBN: String
  wantCount: Int
  readingCount: Int
  readCount: Int
  avgRating: Float
  pages: Int
  avgRatings: Int
}

input BookUpdateWithWhereUniqueNestedInput {
  where: BookWhereUniqueInput!
  data: BookUpdateDataInput!
}

input BookUpdateWithWhereUniqueWithoutAuthorInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutAuthorDataInput!
}

input BookUpdateWithWhereUniqueWithoutGernesInput {
  where: BookWhereUniqueInput!
  data: BookUpdateWithoutGernesDataInput!
}

input BookUpsertNestedInput {
  update: BookUpdateDataInput!
  create: BookCreateInput!
}

input BookUpsertWithoutCommentsInput {
  update: BookUpdateWithoutCommentsDataInput!
  create: BookCreateWithoutCommentsInput!
}

input BookUpsertWithWhereUniqueNestedInput {
  where: BookWhereUniqueInput!
  update: BookUpdateDataInput!
  create: BookCreateInput!
}

input BookUpsertWithWhereUniqueWithoutAuthorInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutAuthorDataInput!
  create: BookCreateWithoutAuthorInput!
}

input BookUpsertWithWhereUniqueWithoutGernesInput {
  where: BookWhereUniqueInput!
  update: BookUpdateWithoutGernesDataInput!
  create: BookCreateWithoutGernesInput!
}

input BookWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  author: AuthorWhereInput
  gernes_every: GerneWhereInput
  gernes_some: GerneWhereInput
  gernes_none: GerneWhereInput
  covorImage: String
  covorImage_not: String
  covorImage_in: [String!]
  covorImage_not_in: [String!]
  covorImage_lt: String
  covorImage_lte: String
  covorImage_gt: String
  covorImage_gte: String
  covorImage_contains: String
  covorImage_not_contains: String
  covorImage_starts_with: String
  covorImage_not_starts_with: String
  covorImage_ends_with: String
  covorImage_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  ISBN: String
  ISBN_not: String
  ISBN_in: [String!]
  ISBN_not_in: [String!]
  ISBN_lt: String
  ISBN_lte: String
  ISBN_gt: String
  ISBN_gte: String
  ISBN_contains: String
  ISBN_not_contains: String
  ISBN_starts_with: String
  ISBN_not_starts_with: String
  ISBN_ends_with: String
  ISBN_not_ends_with: String
  wantCount: Int
  wantCount_not: Int
  wantCount_in: [Int!]
  wantCount_not_in: [Int!]
  wantCount_lt: Int
  wantCount_lte: Int
  wantCount_gt: Int
  wantCount_gte: Int
  readingCount: Int
  readingCount_not: Int
  readingCount_in: [Int!]
  readingCount_not_in: [Int!]
  readingCount_lt: Int
  readingCount_lte: Int
  readingCount_gt: Int
  readingCount_gte: Int
  readCount: Int
  readCount_not: Int
  readCount_in: [Int!]
  readCount_not_in: [Int!]
  readCount_lt: Int
  readCount_lte: Int
  readCount_gt: Int
  readCount_gte: Int
  avgRating: Float
  avgRating_not: Float
  avgRating_in: [Float!]
  avgRating_not_in: [Float!]
  avgRating_lt: Float
  avgRating_lte: Float
  avgRating_gt: Float
  avgRating_gte: Float
  pages: Int
  pages_not: Int
  pages_in: [Int!]
  pages_not_in: [Int!]
  pages_lt: Int
  pages_lte: Int
  pages_gt: Int
  pages_gte: Int
  avgRatings: Int
  avgRatings_not: Int
  avgRatings_in: [Int!]
  avgRatings_not_in: [Int!]
  avgRatings_lt: Int
  avgRatings_lte: Int
  avgRatings_gt: Int
  avgRatings_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [BookWhereInput!]
  OR: [BookWhereInput!]
  NOT: [BookWhereInput!]
}

input BookWhereUniqueInput {
  id: ID
  ISBN: String
}

type Comment {
  id: ID!
  Book: Book
  user: User
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  Book: BookCreateOneWithoutCommentsInput
  user: UserCreateOneWithoutBookCommentsInput
  text: String!
}

input CommentCreateManyWithoutBookInput {
  create: [CommentCreateWithoutBookInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutBookInput {
  id: ID
  user: UserCreateOneWithoutBookCommentsInput
  text: String!
}

input CommentCreateWithoutUserInput {
  id: ID
  Book: BookCreateOneWithoutCommentsInput
  text: String!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  text_ASC
  text_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CommentPreviousValues {
  id: ID!
  text: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateInput {
  Book: BookUpdateOneWithoutCommentsInput
  user: UserUpdateOneWithoutBookCommentsInput
  text: String
}

input CommentUpdateManyDataInput {
  text: String
}

input CommentUpdateManyMutationInput {
  text: String
}

input CommentUpdateManyWithoutBookInput {
  create: [CommentCreateWithoutBookInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutBookInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutBookInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateWithoutBookDataInput {
  user: UserUpdateOneWithoutBookCommentsInput
  text: String
}

input CommentUpdateWithoutUserDataInput {
  Book: BookUpdateOneWithoutCommentsInput
  text: String
}

input CommentUpdateWithWhereUniqueWithoutBookInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutBookDataInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserDataInput!
}

input CommentUpsertWithWhereUniqueWithoutBookInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutBookDataInput!
  create: CommentCreateWithoutBookInput!
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserDataInput!
  create: CommentCreateWithoutUserInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  Book: BookWhereInput
  user: UserWhereInput
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
}

scalar DateTime

type Display {
  id: ID!
  user: User
  book: Book
  shelves(where: ShelfWhereInput, orderBy: ShelfOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shelf!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DisplayConnection {
  pageInfo: PageInfo!
  edges: [DisplayEdge]!
  aggregate: AggregateDisplay!
}

input DisplayCreateInput {
  id: ID
  user: UserCreateOneWithoutDisplaysInput
  book: BookCreateOneInput
  shelves: ShelfCreateManyWithoutDisplaysInput
}

input DisplayCreateManyWithoutShelvesInput {
  create: [DisplayCreateWithoutShelvesInput!]
  connect: [DisplayWhereUniqueInput!]
}

input DisplayCreateManyWithoutUserInput {
  create: [DisplayCreateWithoutUserInput!]
  connect: [DisplayWhereUniqueInput!]
}

input DisplayCreateWithoutShelvesInput {
  id: ID
  user: UserCreateOneWithoutDisplaysInput
  book: BookCreateOneInput
}

input DisplayCreateWithoutUserInput {
  id: ID
  book: BookCreateOneInput
  shelves: ShelfCreateManyWithoutDisplaysInput
}

type DisplayEdge {
  node: Display!
  cursor: String!
}

enum DisplayOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DisplayPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DisplayScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DisplayScalarWhereInput!]
  OR: [DisplayScalarWhereInput!]
  NOT: [DisplayScalarWhereInput!]
}

type DisplaySubscriptionPayload {
  mutation: MutationType!
  node: Display
  updatedFields: [String!]
  previousValues: DisplayPreviousValues
}

input DisplaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DisplayWhereInput
  AND: [DisplaySubscriptionWhereInput!]
  OR: [DisplaySubscriptionWhereInput!]
  NOT: [DisplaySubscriptionWhereInput!]
}

input DisplayUpdateInput {
  user: UserUpdateOneWithoutDisplaysInput
  book: BookUpdateOneInput
  shelves: ShelfUpdateManyWithoutDisplaysInput
}

input DisplayUpdateManyWithoutShelvesInput {
  create: [DisplayCreateWithoutShelvesInput!]
  delete: [DisplayWhereUniqueInput!]
  connect: [DisplayWhereUniqueInput!]
  set: [DisplayWhereUniqueInput!]
  disconnect: [DisplayWhereUniqueInput!]
  update: [DisplayUpdateWithWhereUniqueWithoutShelvesInput!]
  upsert: [DisplayUpsertWithWhereUniqueWithoutShelvesInput!]
  deleteMany: [DisplayScalarWhereInput!]
}

input DisplayUpdateManyWithoutUserInput {
  create: [DisplayCreateWithoutUserInput!]
  delete: [DisplayWhereUniqueInput!]
  connect: [DisplayWhereUniqueInput!]
  set: [DisplayWhereUniqueInput!]
  disconnect: [DisplayWhereUniqueInput!]
  update: [DisplayUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DisplayUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DisplayScalarWhereInput!]
}

input DisplayUpdateWithoutShelvesDataInput {
  user: UserUpdateOneWithoutDisplaysInput
  book: BookUpdateOneInput
}

input DisplayUpdateWithoutUserDataInput {
  book: BookUpdateOneInput
  shelves: ShelfUpdateManyWithoutDisplaysInput
}

input DisplayUpdateWithWhereUniqueWithoutShelvesInput {
  where: DisplayWhereUniqueInput!
  data: DisplayUpdateWithoutShelvesDataInput!
}

input DisplayUpdateWithWhereUniqueWithoutUserInput {
  where: DisplayWhereUniqueInput!
  data: DisplayUpdateWithoutUserDataInput!
}

input DisplayUpsertWithWhereUniqueWithoutShelvesInput {
  where: DisplayWhereUniqueInput!
  update: DisplayUpdateWithoutShelvesDataInput!
  create: DisplayCreateWithoutShelvesInput!
}

input DisplayUpsertWithWhereUniqueWithoutUserInput {
  where: DisplayWhereUniqueInput!
  update: DisplayUpdateWithoutUserDataInput!
  create: DisplayCreateWithoutUserInput!
}

input DisplayWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  book: BookWhereInput
  shelves_every: ShelfWhereInput
  shelves_some: ShelfWhereInput
  shelves_none: ShelfWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [DisplayWhereInput!]
  OR: [DisplayWhereInput!]
  NOT: [DisplayWhereInput!]
}

input DisplayWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
}

type Gerne {
  id: ID!
  term: String!
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GerneConnection {
  pageInfo: PageInfo!
  edges: [GerneEdge]!
  aggregate: AggregateGerne!
}

input GerneCreateInput {
  id: ID
  term: String!
  books: BookCreateManyWithoutGernesInput
  authors: AuthorCreateManyWithoutGernesInput
}

input GerneCreateManyWithoutAuthorsInput {
  create: [GerneCreateWithoutAuthorsInput!]
  connect: [GerneWhereUniqueInput!]
}

input GerneCreateManyWithoutBooksInput {
  create: [GerneCreateWithoutBooksInput!]
  connect: [GerneWhereUniqueInput!]
}

input GerneCreateWithoutAuthorsInput {
  id: ID
  term: String!
  books: BookCreateManyWithoutGernesInput
}

input GerneCreateWithoutBooksInput {
  id: ID
  term: String!
  authors: AuthorCreateManyWithoutGernesInput
}

type GerneEdge {
  node: Gerne!
  cursor: String!
}

enum GerneOrderByInput {
  id_ASC
  id_DESC
  term_ASC
  term_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GernePreviousValues {
  id: ID!
  term: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input GerneScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  term: String
  term_not: String
  term_in: [String!]
  term_not_in: [String!]
  term_lt: String
  term_lte: String
  term_gt: String
  term_gte: String
  term_contains: String
  term_not_contains: String
  term_starts_with: String
  term_not_starts_with: String
  term_ends_with: String
  term_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GerneScalarWhereInput!]
  OR: [GerneScalarWhereInput!]
  NOT: [GerneScalarWhereInput!]
}

type GerneSubscriptionPayload {
  mutation: MutationType!
  node: Gerne
  updatedFields: [String!]
  previousValues: GernePreviousValues
}

input GerneSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GerneWhereInput
  AND: [GerneSubscriptionWhereInput!]
  OR: [GerneSubscriptionWhereInput!]
  NOT: [GerneSubscriptionWhereInput!]
}

input GerneUpdateInput {
  term: String
  books: BookUpdateManyWithoutGernesInput
  authors: AuthorUpdateManyWithoutGernesInput
}

input GerneUpdateManyDataInput {
  term: String
}

input GerneUpdateManyMutationInput {
  term: String
}

input GerneUpdateManyWithoutAuthorsInput {
  create: [GerneCreateWithoutAuthorsInput!]
  delete: [GerneWhereUniqueInput!]
  connect: [GerneWhereUniqueInput!]
  set: [GerneWhereUniqueInput!]
  disconnect: [GerneWhereUniqueInput!]
  update: [GerneUpdateWithWhereUniqueWithoutAuthorsInput!]
  upsert: [GerneUpsertWithWhereUniqueWithoutAuthorsInput!]
  deleteMany: [GerneScalarWhereInput!]
  updateMany: [GerneUpdateManyWithWhereNestedInput!]
}

input GerneUpdateManyWithoutBooksInput {
  create: [GerneCreateWithoutBooksInput!]
  delete: [GerneWhereUniqueInput!]
  connect: [GerneWhereUniqueInput!]
  set: [GerneWhereUniqueInput!]
  disconnect: [GerneWhereUniqueInput!]
  update: [GerneUpdateWithWhereUniqueWithoutBooksInput!]
  upsert: [GerneUpsertWithWhereUniqueWithoutBooksInput!]
  deleteMany: [GerneScalarWhereInput!]
  updateMany: [GerneUpdateManyWithWhereNestedInput!]
}

input GerneUpdateManyWithWhereNestedInput {
  where: GerneScalarWhereInput!
  data: GerneUpdateManyDataInput!
}

input GerneUpdateWithoutAuthorsDataInput {
  term: String
  books: BookUpdateManyWithoutGernesInput
}

input GerneUpdateWithoutBooksDataInput {
  term: String
  authors: AuthorUpdateManyWithoutGernesInput
}

input GerneUpdateWithWhereUniqueWithoutAuthorsInput {
  where: GerneWhereUniqueInput!
  data: GerneUpdateWithoutAuthorsDataInput!
}

input GerneUpdateWithWhereUniqueWithoutBooksInput {
  where: GerneWhereUniqueInput!
  data: GerneUpdateWithoutBooksDataInput!
}

input GerneUpsertWithWhereUniqueWithoutAuthorsInput {
  where: GerneWhereUniqueInput!
  update: GerneUpdateWithoutAuthorsDataInput!
  create: GerneCreateWithoutAuthorsInput!
}

input GerneUpsertWithWhereUniqueWithoutBooksInput {
  where: GerneWhereUniqueInput!
  update: GerneUpdateWithoutBooksDataInput!
  create: GerneCreateWithoutBooksInput!
}

input GerneWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  term: String
  term_not: String
  term_in: [String!]
  term_not_in: [String!]
  term_lt: String
  term_lte: String
  term_gt: String
  term_gte: String
  term_contains: String
  term_not_contains: String
  term_starts_with: String
  term_not_starts_with: String
  term_ends_with: String
  term_not_ends_with: String
  books_every: BookWhereInput
  books_some: BookWhereInput
  books_none: BookWhereInput
  authors_every: AuthorWhereInput
  authors_some: AuthorWhereInput
  authors_none: AuthorWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [GerneWhereInput!]
  OR: [GerneWhereInput!]
  NOT: [GerneWhereInput!]
}

input GerneWhereUniqueInput {
  id: ID
  term: String
}

scalar Long

type Mutation {
  createAuthor(data: AuthorCreateInput!): Author!
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author
  updateManyAuthors(data: AuthorUpdateManyMutationInput!, where: AuthorWhereInput): BatchPayload!
  upsertAuthor(where: AuthorWhereUniqueInput!, create: AuthorCreateInput!, update: AuthorUpdateInput!): Author!
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteManyAuthors(where: AuthorWhereInput): BatchPayload!
  createBook(data: BookCreateInput!): Book!
  updateBook(data: BookUpdateInput!, where: BookWhereUniqueInput!): Book
  updateManyBooks(data: BookUpdateManyMutationInput!, where: BookWhereInput): BatchPayload!
  upsertBook(where: BookWhereUniqueInput!, create: BookCreateInput!, update: BookUpdateInput!): Book!
  deleteBook(where: BookWhereUniqueInput!): Book
  deleteManyBooks(where: BookWhereInput): BatchPayload!
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createDisplay(data: DisplayCreateInput!): Display!
  updateDisplay(data: DisplayUpdateInput!, where: DisplayWhereUniqueInput!): Display
  upsertDisplay(where: DisplayWhereUniqueInput!, create: DisplayCreateInput!, update: DisplayUpdateInput!): Display!
  deleteDisplay(where: DisplayWhereUniqueInput!): Display
  deleteManyDisplays(where: DisplayWhereInput): BatchPayload!
  createGerne(data: GerneCreateInput!): Gerne!
  updateGerne(data: GerneUpdateInput!, where: GerneWhereUniqueInput!): Gerne
  updateManyGernes(data: GerneUpdateManyMutationInput!, where: GerneWhereInput): BatchPayload!
  upsertGerne(where: GerneWhereUniqueInput!, create: GerneCreateInput!, update: GerneUpdateInput!): Gerne!
  deleteGerne(where: GerneWhereUniqueInput!): Gerne
  deleteManyGernes(where: GerneWhereInput): BatchPayload!
  createProfile(data: ProfileCreateInput!): Profile!
  updateProfile(data: ProfileUpdateInput!, where: ProfileWhereUniqueInput!): Profile
  updateManyProfiles(data: ProfileUpdateManyMutationInput!, where: ProfileWhereInput): BatchPayload!
  upsertProfile(where: ProfileWhereUniqueInput!, create: ProfileCreateInput!, update: ProfileUpdateInput!): Profile!
  deleteProfile(where: ProfileWhereUniqueInput!): Profile
  deleteManyProfiles(where: ProfileWhereInput): BatchPayload!
  createQuote(data: QuoteCreateInput!): Quote!
  updateQuote(data: QuoteUpdateInput!, where: QuoteWhereUniqueInput!): Quote
  updateManyQuotes(data: QuoteUpdateManyMutationInput!, where: QuoteWhereInput): BatchPayload!
  upsertQuote(where: QuoteWhereUniqueInput!, create: QuoteCreateInput!, update: QuoteUpdateInput!): Quote!
  deleteQuote(where: QuoteWhereUniqueInput!): Quote
  deleteManyQuotes(where: QuoteWhereInput): BatchPayload!
  createShelf(data: ShelfCreateInput!): Shelf!
  updateShelf(data: ShelfUpdateInput!, where: ShelfWhereUniqueInput!): Shelf
  updateManyShelves(data: ShelfUpdateManyMutationInput!, where: ShelfWhereInput): BatchPayload!
  upsertShelf(where: ShelfWhereUniqueInput!, create: ShelfCreateInput!, update: ShelfUpdateInput!): Shelf!
  deleteShelf(where: ShelfWhereUniqueInput!): Shelf
  deleteManyShelves(where: ShelfWhereInput): BatchPayload!
  createTag(data: TagCreateInput!): Tag!
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateManyTags(data: TagUpdateManyMutationInput!, where: TagWhereInput): BatchPayload!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteManyTags(where: TagWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Profile {
  id: ID!
  user: User
  age: Int
  gender: Gender!
  bio: String
  interests: String
  favoriteBook: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProfileConnection {
  pageInfo: PageInfo!
  edges: [ProfileEdge]!
  aggregate: AggregateProfile!
}

input ProfileCreateInput {
  id: ID
  user: UserCreateOneWithoutProfileInput
  age: Int
  gender: Gender!
  bio: String
  interests: String
  favoriteBook: String
}

input ProfileCreateOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  connect: ProfileWhereUniqueInput
}

input ProfileCreateWithoutUserInput {
  id: ID
  age: Int
  gender: Gender!
  bio: String
  interests: String
  favoriteBook: String
}

type ProfileEdge {
  node: Profile!
  cursor: String!
}

enum ProfileOrderByInput {
  id_ASC
  id_DESC
  age_ASC
  age_DESC
  gender_ASC
  gender_DESC
  bio_ASC
  bio_DESC
  interests_ASC
  interests_DESC
  favoriteBook_ASC
  favoriteBook_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProfilePreviousValues {
  id: ID!
  age: Int
  gender: Gender!
  bio: String
  interests: String
  favoriteBook: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProfileSubscriptionPayload {
  mutation: MutationType!
  node: Profile
  updatedFields: [String!]
  previousValues: ProfilePreviousValues
}

input ProfileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProfileWhereInput
  AND: [ProfileSubscriptionWhereInput!]
  OR: [ProfileSubscriptionWhereInput!]
  NOT: [ProfileSubscriptionWhereInput!]
}

input ProfileUpdateInput {
  user: UserUpdateOneWithoutProfileInput
  age: Int
  gender: Gender
  bio: String
  interests: String
  favoriteBook: String
}

input ProfileUpdateManyMutationInput {
  age: Int
  gender: Gender
  bio: String
  interests: String
  favoriteBook: String
}

input ProfileUpdateOneWithoutUserInput {
  create: ProfileCreateWithoutUserInput
  update: ProfileUpdateWithoutUserDataInput
  upsert: ProfileUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: ProfileWhereUniqueInput
}

input ProfileUpdateWithoutUserDataInput {
  age: Int
  gender: Gender
  bio: String
  interests: String
  favoriteBook: String
}

input ProfileUpsertWithoutUserInput {
  update: ProfileUpdateWithoutUserDataInput!
  create: ProfileCreateWithoutUserInput!
}

input ProfileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  age: Int
  age_not: Int
  age_in: [Int!]
  age_not_in: [Int!]
  age_lt: Int
  age_lte: Int
  age_gt: Int
  age_gte: Int
  gender: Gender
  gender_not: Gender
  gender_in: [Gender!]
  gender_not_in: [Gender!]
  bio: String
  bio_not: String
  bio_in: [String!]
  bio_not_in: [String!]
  bio_lt: String
  bio_lte: String
  bio_gt: String
  bio_gte: String
  bio_contains: String
  bio_not_contains: String
  bio_starts_with: String
  bio_not_starts_with: String
  bio_ends_with: String
  bio_not_ends_with: String
  interests: String
  interests_not: String
  interests_in: [String!]
  interests_not_in: [String!]
  interests_lt: String
  interests_lte: String
  interests_gt: String
  interests_gte: String
  interests_contains: String
  interests_not_contains: String
  interests_starts_with: String
  interests_not_starts_with: String
  interests_ends_with: String
  interests_not_ends_with: String
  favoriteBook: String
  favoriteBook_not: String
  favoriteBook_in: [String!]
  favoriteBook_not_in: [String!]
  favoriteBook_lt: String
  favoriteBook_lte: String
  favoriteBook_gt: String
  favoriteBook_gte: String
  favoriteBook_contains: String
  favoriteBook_not_contains: String
  favoriteBook_starts_with: String
  favoriteBook_not_starts_with: String
  favoriteBook_ends_with: String
  favoriteBook_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
}

input ProfileWhereUniqueInput {
  id: ID
}

type Query {
  author(where: AuthorWhereUniqueInput!): Author
  authors(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Author]!
  authorsConnection(where: AuthorWhereInput, orderBy: AuthorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthorConnection!
  book(where: BookWhereUniqueInput!): Book
  books(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book]!
  booksConnection(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookConnection!
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  display(where: DisplayWhereUniqueInput!): Display
  displays(where: DisplayWhereInput, orderBy: DisplayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Display]!
  displaysConnection(where: DisplayWhereInput, orderBy: DisplayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DisplayConnection!
  gerne(where: GerneWhereUniqueInput!): Gerne
  gernes(where: GerneWhereInput, orderBy: GerneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gerne]!
  gernesConnection(where: GerneWhereInput, orderBy: GerneOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GerneConnection!
  profile(where: ProfileWhereUniqueInput!): Profile
  profiles(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Profile]!
  profilesConnection(where: ProfileWhereInput, orderBy: ProfileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProfileConnection!
  quote(where: QuoteWhereUniqueInput!): Quote
  quotes(where: QuoteWhereInput, orderBy: QuoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quote]!
  quotesConnection(where: QuoteWhereInput, orderBy: QuoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuoteConnection!
  shelf(where: ShelfWhereUniqueInput!): Shelf
  shelves(where: ShelfWhereInput, orderBy: ShelfOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shelf]!
  shelvesConnection(where: ShelfWhereInput, orderBy: ShelfOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ShelfConnection!
  tag(where: TagWhereUniqueInput!): Tag
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Quote {
  id: ID!
  term: String
  author: Author
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  likesCount: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuoteConnection {
  pageInfo: PageInfo!
  edges: [QuoteEdge]!
  aggregate: AggregateQuote!
}

input QuoteCreateInput {
  id: ID
  term: String
  author: AuthorCreateOneWithoutQuotesInput
  tags: TagCreateManyWithoutQuotesInput
  likesCount: Int
}

input QuoteCreateManyInput {
  create: [QuoteCreateInput!]
  connect: [QuoteWhereUniqueInput!]
}

input QuoteCreateManyWithoutAuthorInput {
  create: [QuoteCreateWithoutAuthorInput!]
  connect: [QuoteWhereUniqueInput!]
}

input QuoteCreateManyWithoutTagsInput {
  create: [QuoteCreateWithoutTagsInput!]
  connect: [QuoteWhereUniqueInput!]
}

input QuoteCreateWithoutAuthorInput {
  id: ID
  term: String
  tags: TagCreateManyWithoutQuotesInput
  likesCount: Int
}

input QuoteCreateWithoutTagsInput {
  id: ID
  term: String
  author: AuthorCreateOneWithoutQuotesInput
  likesCount: Int
}

type QuoteEdge {
  node: Quote!
  cursor: String!
}

enum QuoteOrderByInput {
  id_ASC
  id_DESC
  term_ASC
  term_DESC
  likesCount_ASC
  likesCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuotePreviousValues {
  id: ID!
  term: String
  likesCount: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input QuoteScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  term: String
  term_not: String
  term_in: [String!]
  term_not_in: [String!]
  term_lt: String
  term_lte: String
  term_gt: String
  term_gte: String
  term_contains: String
  term_not_contains: String
  term_starts_with: String
  term_not_starts_with: String
  term_ends_with: String
  term_not_ends_with: String
  likesCount: Int
  likesCount_not: Int
  likesCount_in: [Int!]
  likesCount_not_in: [Int!]
  likesCount_lt: Int
  likesCount_lte: Int
  likesCount_gt: Int
  likesCount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [QuoteScalarWhereInput!]
  OR: [QuoteScalarWhereInput!]
  NOT: [QuoteScalarWhereInput!]
}

type QuoteSubscriptionPayload {
  mutation: MutationType!
  node: Quote
  updatedFields: [String!]
  previousValues: QuotePreviousValues
}

input QuoteSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuoteWhereInput
  AND: [QuoteSubscriptionWhereInput!]
  OR: [QuoteSubscriptionWhereInput!]
  NOT: [QuoteSubscriptionWhereInput!]
}

input QuoteUpdateDataInput {
  term: String
  author: AuthorUpdateOneWithoutQuotesInput
  tags: TagUpdateManyWithoutQuotesInput
  likesCount: Int
}

input QuoteUpdateInput {
  term: String
  author: AuthorUpdateOneWithoutQuotesInput
  tags: TagUpdateManyWithoutQuotesInput
  likesCount: Int
}

input QuoteUpdateManyDataInput {
  term: String
  likesCount: Int
}

input QuoteUpdateManyInput {
  create: [QuoteCreateInput!]
  update: [QuoteUpdateWithWhereUniqueNestedInput!]
  upsert: [QuoteUpsertWithWhereUniqueNestedInput!]
  delete: [QuoteWhereUniqueInput!]
  connect: [QuoteWhereUniqueInput!]
  set: [QuoteWhereUniqueInput!]
  disconnect: [QuoteWhereUniqueInput!]
  deleteMany: [QuoteScalarWhereInput!]
  updateMany: [QuoteUpdateManyWithWhereNestedInput!]
}

input QuoteUpdateManyMutationInput {
  term: String
  likesCount: Int
}

input QuoteUpdateManyWithoutAuthorInput {
  create: [QuoteCreateWithoutAuthorInput!]
  delete: [QuoteWhereUniqueInput!]
  connect: [QuoteWhereUniqueInput!]
  set: [QuoteWhereUniqueInput!]
  disconnect: [QuoteWhereUniqueInput!]
  update: [QuoteUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [QuoteUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [QuoteScalarWhereInput!]
  updateMany: [QuoteUpdateManyWithWhereNestedInput!]
}

input QuoteUpdateManyWithoutTagsInput {
  create: [QuoteCreateWithoutTagsInput!]
  delete: [QuoteWhereUniqueInput!]
  connect: [QuoteWhereUniqueInput!]
  set: [QuoteWhereUniqueInput!]
  disconnect: [QuoteWhereUniqueInput!]
  update: [QuoteUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [QuoteUpsertWithWhereUniqueWithoutTagsInput!]
  deleteMany: [QuoteScalarWhereInput!]
  updateMany: [QuoteUpdateManyWithWhereNestedInput!]
}

input QuoteUpdateManyWithWhereNestedInput {
  where: QuoteScalarWhereInput!
  data: QuoteUpdateManyDataInput!
}

input QuoteUpdateWithoutAuthorDataInput {
  term: String
  tags: TagUpdateManyWithoutQuotesInput
  likesCount: Int
}

input QuoteUpdateWithoutTagsDataInput {
  term: String
  author: AuthorUpdateOneWithoutQuotesInput
  likesCount: Int
}

input QuoteUpdateWithWhereUniqueNestedInput {
  where: QuoteWhereUniqueInput!
  data: QuoteUpdateDataInput!
}

input QuoteUpdateWithWhereUniqueWithoutAuthorInput {
  where: QuoteWhereUniqueInput!
  data: QuoteUpdateWithoutAuthorDataInput!
}

input QuoteUpdateWithWhereUniqueWithoutTagsInput {
  where: QuoteWhereUniqueInput!
  data: QuoteUpdateWithoutTagsDataInput!
}

input QuoteUpsertWithWhereUniqueNestedInput {
  where: QuoteWhereUniqueInput!
  update: QuoteUpdateDataInput!
  create: QuoteCreateInput!
}

input QuoteUpsertWithWhereUniqueWithoutAuthorInput {
  where: QuoteWhereUniqueInput!
  update: QuoteUpdateWithoutAuthorDataInput!
  create: QuoteCreateWithoutAuthorInput!
}

input QuoteUpsertWithWhereUniqueWithoutTagsInput {
  where: QuoteWhereUniqueInput!
  update: QuoteUpdateWithoutTagsDataInput!
  create: QuoteCreateWithoutTagsInput!
}

input QuoteWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  term: String
  term_not: String
  term_in: [String!]
  term_not_in: [String!]
  term_lt: String
  term_lte: String
  term_gt: String
  term_gte: String
  term_contains: String
  term_not_contains: String
  term_starts_with: String
  term_not_starts_with: String
  term_ends_with: String
  term_not_ends_with: String
  author: AuthorWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  likesCount: Int
  likesCount_not: Int
  likesCount_in: [Int!]
  likesCount_not_in: [Int!]
  likesCount_lt: Int
  likesCount_lte: Int
  likesCount_gt: Int
  likesCount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [QuoteWhereInput!]
  OR: [QuoteWhereInput!]
  NOT: [QuoteWhereInput!]
}

input QuoteWhereUniqueInput {
  id: ID
  term: String
}

type Shelf {
  id: ID!
  user: User
  name: String!
  displays(where: DisplayWhereInput, orderBy: DisplayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Display!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ShelfConnection {
  pageInfo: PageInfo!
  edges: [ShelfEdge]!
  aggregate: AggregateShelf!
}

input ShelfCreateInput {
  id: ID
  user: UserCreateOneWithoutShelvesInput
  name: String!
  displays: DisplayCreateManyWithoutShelvesInput
}

input ShelfCreateManyWithoutDisplaysInput {
  create: [ShelfCreateWithoutDisplaysInput!]
  connect: [ShelfWhereUniqueInput!]
}

input ShelfCreateManyWithoutUserInput {
  create: [ShelfCreateWithoutUserInput!]
  connect: [ShelfWhereUniqueInput!]
}

input ShelfCreateWithoutDisplaysInput {
  id: ID
  user: UserCreateOneWithoutShelvesInput
  name: String!
}

input ShelfCreateWithoutUserInput {
  id: ID
  name: String!
  displays: DisplayCreateManyWithoutShelvesInput
}

type ShelfEdge {
  node: Shelf!
  cursor: String!
}

enum ShelfOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ShelfPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ShelfScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShelfScalarWhereInput!]
  OR: [ShelfScalarWhereInput!]
  NOT: [ShelfScalarWhereInput!]
}

type ShelfSubscriptionPayload {
  mutation: MutationType!
  node: Shelf
  updatedFields: [String!]
  previousValues: ShelfPreviousValues
}

input ShelfSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ShelfWhereInput
  AND: [ShelfSubscriptionWhereInput!]
  OR: [ShelfSubscriptionWhereInput!]
  NOT: [ShelfSubscriptionWhereInput!]
}

input ShelfUpdateInput {
  user: UserUpdateOneWithoutShelvesInput
  name: String
  displays: DisplayUpdateManyWithoutShelvesInput
}

input ShelfUpdateManyDataInput {
  name: String
}

input ShelfUpdateManyMutationInput {
  name: String
}

input ShelfUpdateManyWithoutDisplaysInput {
  create: [ShelfCreateWithoutDisplaysInput!]
  delete: [ShelfWhereUniqueInput!]
  connect: [ShelfWhereUniqueInput!]
  set: [ShelfWhereUniqueInput!]
  disconnect: [ShelfWhereUniqueInput!]
  update: [ShelfUpdateWithWhereUniqueWithoutDisplaysInput!]
  upsert: [ShelfUpsertWithWhereUniqueWithoutDisplaysInput!]
  deleteMany: [ShelfScalarWhereInput!]
  updateMany: [ShelfUpdateManyWithWhereNestedInput!]
}

input ShelfUpdateManyWithoutUserInput {
  create: [ShelfCreateWithoutUserInput!]
  delete: [ShelfWhereUniqueInput!]
  connect: [ShelfWhereUniqueInput!]
  set: [ShelfWhereUniqueInput!]
  disconnect: [ShelfWhereUniqueInput!]
  update: [ShelfUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ShelfUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ShelfScalarWhereInput!]
  updateMany: [ShelfUpdateManyWithWhereNestedInput!]
}

input ShelfUpdateManyWithWhereNestedInput {
  where: ShelfScalarWhereInput!
  data: ShelfUpdateManyDataInput!
}

input ShelfUpdateWithoutDisplaysDataInput {
  user: UserUpdateOneWithoutShelvesInput
  name: String
}

input ShelfUpdateWithoutUserDataInput {
  name: String
  displays: DisplayUpdateManyWithoutShelvesInput
}

input ShelfUpdateWithWhereUniqueWithoutDisplaysInput {
  where: ShelfWhereUniqueInput!
  data: ShelfUpdateWithoutDisplaysDataInput!
}

input ShelfUpdateWithWhereUniqueWithoutUserInput {
  where: ShelfWhereUniqueInput!
  data: ShelfUpdateWithoutUserDataInput!
}

input ShelfUpsertWithWhereUniqueWithoutDisplaysInput {
  where: ShelfWhereUniqueInput!
  update: ShelfUpdateWithoutDisplaysDataInput!
  create: ShelfCreateWithoutDisplaysInput!
}

input ShelfUpsertWithWhereUniqueWithoutUserInput {
  where: ShelfWhereUniqueInput!
  update: ShelfUpdateWithoutUserDataInput!
  create: ShelfCreateWithoutUserInput!
}

input ShelfWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  displays_every: DisplayWhereInput
  displays_some: DisplayWhereInput
  displays_none: DisplayWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [ShelfWhereInput!]
  OR: [ShelfWhereInput!]
  NOT: [ShelfWhereInput!]
}

input ShelfWhereUniqueInput {
  id: ID
}

type Subscription {
  author(where: AuthorSubscriptionWhereInput): AuthorSubscriptionPayload
  book(where: BookSubscriptionWhereInput): BookSubscriptionPayload
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  display(where: DisplaySubscriptionWhereInput): DisplaySubscriptionPayload
  gerne(where: GerneSubscriptionWhereInput): GerneSubscriptionPayload
  profile(where: ProfileSubscriptionWhereInput): ProfileSubscriptionPayload
  quote(where: QuoteSubscriptionWhereInput): QuoteSubscriptionPayload
  shelf(where: ShelfSubscriptionWhereInput): ShelfSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Tag {
  id: ID!
  quotes(where: QuoteWhereInput, orderBy: QuoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quote!]
  term: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TagConnection {
  pageInfo: PageInfo!
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  id: ID
  quotes: QuoteCreateManyWithoutTagsInput
  term: String!
}

input TagCreateManyWithoutQuotesInput {
  create: [TagCreateWithoutQuotesInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutQuotesInput {
  id: ID
  term: String!
}

type TagEdge {
  node: Tag!
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  term_ASC
  term_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TagPreviousValues {
  id: ID!
  term: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TagScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  term: String
  term_not: String
  term_in: [String!]
  term_not_in: [String!]
  term_lt: String
  term_lte: String
  term_gt: String
  term_gte: String
  term_contains: String
  term_not_contains: String
  term_starts_with: String
  term_not_starts_with: String
  term_ends_with: String
  term_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TagWhereInput
  AND: [TagSubscriptionWhereInput!]
  OR: [TagSubscriptionWhereInput!]
  NOT: [TagSubscriptionWhereInput!]
}

input TagUpdateInput {
  quotes: QuoteUpdateManyWithoutTagsInput
  term: String
}

input TagUpdateManyDataInput {
  term: String
}

input TagUpdateManyMutationInput {
  term: String
}

input TagUpdateManyWithoutQuotesInput {
  create: [TagCreateWithoutQuotesInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutQuotesInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutQuotesInput!]
  deleteMany: [TagScalarWhereInput!]
  updateMany: [TagUpdateManyWithWhereNestedInput!]
}

input TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyDataInput!
}

input TagUpdateWithoutQuotesDataInput {
  term: String
}

input TagUpdateWithWhereUniqueWithoutQuotesInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutQuotesDataInput!
}

input TagUpsertWithWhereUniqueWithoutQuotesInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutQuotesDataInput!
  create: TagCreateWithoutQuotesInput!
}

input TagWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quotes_every: QuoteWhereInput
  quotes_some: QuoteWhereInput
  quotes_none: QuoteWhereInput
  term: String
  term_not: String
  term_in: [String!]
  term_not_in: [String!]
  term_lt: String
  term_lte: String
  term_gt: String
  term_gte: String
  term_contains: String
  term_not_contains: String
  term_starts_with: String
  term_not_starts_with: String
  term_ends_with: String
  term_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
}

input TagWhereUniqueInput {
  id: ID
  term: String
}

type User {
  id: ID!
  email: String!
  password: String!
  username: String!
  profile: Profile
  isAdmin: Boolean
  RatingBooks(where: BookWhereInput, orderBy: BookOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Book!]
  bookAvgRating: Float
  bookComments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  shelves(where: ShelfWhereInput, orderBy: ShelfOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Shelf!]
  likeQuotes(where: QuoteWhereInput, orderBy: QuoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quote!]
  displays(where: DisplayWhereInput, orderBy: DisplayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Display!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  username: String!
  profile: ProfileCreateOneWithoutUserInput
  isAdmin: Boolean
  RatingBooks: BookCreateManyInput
  bookAvgRating: Float
  bookComments: CommentCreateManyWithoutUserInput
  shelves: ShelfCreateManyWithoutUserInput
  likeQuotes: QuoteCreateManyInput
  displays: DisplayCreateManyWithoutUserInput
}

input UserCreateOneWithoutBookCommentsInput {
  create: UserCreateWithoutBookCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDisplaysInput {
  create: UserCreateWithoutDisplaysInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutShelvesInput {
  create: UserCreateWithoutShelvesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBookCommentsInput {
  id: ID
  email: String!
  password: String!
  username: String!
  profile: ProfileCreateOneWithoutUserInput
  isAdmin: Boolean
  RatingBooks: BookCreateManyInput
  bookAvgRating: Float
  shelves: ShelfCreateManyWithoutUserInput
  likeQuotes: QuoteCreateManyInput
  displays: DisplayCreateManyWithoutUserInput
}

input UserCreateWithoutDisplaysInput {
  id: ID
  email: String!
  password: String!
  username: String!
  profile: ProfileCreateOneWithoutUserInput
  isAdmin: Boolean
  RatingBooks: BookCreateManyInput
  bookAvgRating: Float
  bookComments: CommentCreateManyWithoutUserInput
  shelves: ShelfCreateManyWithoutUserInput
  likeQuotes: QuoteCreateManyInput
}

input UserCreateWithoutProfileInput {
  id: ID
  email: String!
  password: String!
  username: String!
  isAdmin: Boolean
  RatingBooks: BookCreateManyInput
  bookAvgRating: Float
  bookComments: CommentCreateManyWithoutUserInput
  shelves: ShelfCreateManyWithoutUserInput
  likeQuotes: QuoteCreateManyInput
  displays: DisplayCreateManyWithoutUserInput
}

input UserCreateWithoutShelvesInput {
  id: ID
  email: String!
  password: String!
  username: String!
  profile: ProfileCreateOneWithoutUserInput
  isAdmin: Boolean
  RatingBooks: BookCreateManyInput
  bookAvgRating: Float
  bookComments: CommentCreateManyWithoutUserInput
  likeQuotes: QuoteCreateManyInput
  displays: DisplayCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  username_ASC
  username_DESC
  isAdmin_ASC
  isAdmin_DESC
  bookAvgRating_ASC
  bookAvgRating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  username: String!
  isAdmin: Boolean
  bookAvgRating: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  username: String
  profile: ProfileUpdateOneWithoutUserInput
  isAdmin: Boolean
  RatingBooks: BookUpdateManyInput
  bookAvgRating: Float
  bookComments: CommentUpdateManyWithoutUserInput
  shelves: ShelfUpdateManyWithoutUserInput
  likeQuotes: QuoteUpdateManyInput
  displays: DisplayUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
  username: String
  isAdmin: Boolean
  bookAvgRating: Float
}

input UserUpdateOneWithoutBookCommentsInput {
  create: UserCreateWithoutBookCommentsInput
  update: UserUpdateWithoutBookCommentsDataInput
  upsert: UserUpsertWithoutBookCommentsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutDisplaysInput {
  create: UserCreateWithoutDisplaysInput
  update: UserUpdateWithoutDisplaysDataInput
  upsert: UserUpsertWithoutDisplaysInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutProfileInput {
  create: UserCreateWithoutProfileInput
  update: UserUpdateWithoutProfileDataInput
  upsert: UserUpsertWithoutProfileInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutShelvesInput {
  create: UserCreateWithoutShelvesInput
  update: UserUpdateWithoutShelvesDataInput
  upsert: UserUpsertWithoutShelvesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBookCommentsDataInput {
  email: String
  password: String
  username: String
  profile: ProfileUpdateOneWithoutUserInput
  isAdmin: Boolean
  RatingBooks: BookUpdateManyInput
  bookAvgRating: Float
  shelves: ShelfUpdateManyWithoutUserInput
  likeQuotes: QuoteUpdateManyInput
  displays: DisplayUpdateManyWithoutUserInput
}

input UserUpdateWithoutDisplaysDataInput {
  email: String
  password: String
  username: String
  profile: ProfileUpdateOneWithoutUserInput
  isAdmin: Boolean
  RatingBooks: BookUpdateManyInput
  bookAvgRating: Float
  bookComments: CommentUpdateManyWithoutUserInput
  shelves: ShelfUpdateManyWithoutUserInput
  likeQuotes: QuoteUpdateManyInput
}

input UserUpdateWithoutProfileDataInput {
  email: String
  password: String
  username: String
  isAdmin: Boolean
  RatingBooks: BookUpdateManyInput
  bookAvgRating: Float
  bookComments: CommentUpdateManyWithoutUserInput
  shelves: ShelfUpdateManyWithoutUserInput
  likeQuotes: QuoteUpdateManyInput
  displays: DisplayUpdateManyWithoutUserInput
}

input UserUpdateWithoutShelvesDataInput {
  email: String
  password: String
  username: String
  profile: ProfileUpdateOneWithoutUserInput
  isAdmin: Boolean
  RatingBooks: BookUpdateManyInput
  bookAvgRating: Float
  bookComments: CommentUpdateManyWithoutUserInput
  likeQuotes: QuoteUpdateManyInput
  displays: DisplayUpdateManyWithoutUserInput
}

input UserUpsertWithoutBookCommentsInput {
  update: UserUpdateWithoutBookCommentsDataInput!
  create: UserCreateWithoutBookCommentsInput!
}

input UserUpsertWithoutDisplaysInput {
  update: UserUpdateWithoutDisplaysDataInput!
  create: UserCreateWithoutDisplaysInput!
}

input UserUpsertWithoutProfileInput {
  update: UserUpdateWithoutProfileDataInput!
  create: UserCreateWithoutProfileInput!
}

input UserUpsertWithoutShelvesInput {
  update: UserUpdateWithoutShelvesDataInput!
  create: UserCreateWithoutShelvesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  profile: ProfileWhereInput
  isAdmin: Boolean
  isAdmin_not: Boolean
  RatingBooks_every: BookWhereInput
  RatingBooks_some: BookWhereInput
  RatingBooks_none: BookWhereInput
  bookAvgRating: Float
  bookAvgRating_not: Float
  bookAvgRating_in: [Float!]
  bookAvgRating_not_in: [Float!]
  bookAvgRating_lt: Float
  bookAvgRating_lte: Float
  bookAvgRating_gt: Float
  bookAvgRating_gte: Float
  bookComments_every: CommentWhereInput
  bookComments_some: CommentWhereInput
  bookComments_none: CommentWhereInput
  shelves_every: ShelfWhereInput
  shelves_some: ShelfWhereInput
  shelves_none: ShelfWhereInput
  likeQuotes_every: QuoteWhereInput
  likeQuotes_some: QuoteWhereInput
  likeQuotes_none: QuoteWhereInput
  displays_every: DisplayWhereInput
  displays_some: DisplayWhereInput
  displays_none: DisplayWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  username: String
}
`