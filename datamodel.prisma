type Book {
  id: ID! @id @unique
  title : String!
  authors: [Author!]! @relation(name: "BookOfAuthor",onDelete: SET_NULL)
  thumbnail: String!
  contents: String
  datetime: String
  isbn: String! @unique
  price: Int
  publisher : String
  saleStatus: String
  wantCount: Int! @default(value:0)
  readingCount: Int! @default(value:0)
  readCount: Int! @default(value:0)
  comments: [Comment!] @relation(name: "CommentOfBook",onDelete: CASCADE)
  gernes: [Gerne!] @relation(name: "GerneOfBook",onDelete: SET_NULL)
  totalRating:Float! @default(value:0)
  ratedUserNum:Int! @default(value:0)
  addUser: User @relation(name: "BookOfUser",onDelete: SET_NULL)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Author {
  id: ID! @id @unique
  name: String! @unique
  born: String
  died: String
  gernes: [Gerne!] @relation(name: "GerneOfAuthor",onDelete: SET_NULL)
  description: String
  photo: String @default(value:"https://goodreads-jerrynim.s3.ap-northeast-2.amazonaws.com/ink-pen.png")
  books: [Book!] @relation(name: "BookOfAuthor",onDelete: CASCADE)
  quotes: [Quote!] @relation(name: "QuoteOfAuthor",onDelete: CASCADE)
  comments : [AuthorComment!] @relation(name: "CommentOfAuthor",onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Gerne {
  id: ID! @id @unique
  term: String! @unique
  books: [Book!] @relation(name: "GerneOfBook",onDelete:SET_NULL)
  authors: [Author!] @relation(name: "GerneOfAuthor",onDelete:SET_NULL)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Quote {
  id: ID! @id @unique
  term: String @unique
  author: Author @relation(name: "QuoteOfAuthor",onDelete:SET_NULL)
  tags: [Tag!] @relation(name: "TagOfQuote",onDelete:SET_NULL)
  likesCount: Int
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Rating {
  id: ID! @id @unique
  user: User! @relation(link: INLINE)
  book: Book! 
  count: Float!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type User {
  id: ID! @id @unique
  email: String! @unique
  password: String!
  username: String! @unique
  profilePhoto: String! @default(value:"https://goodreads-jerrynim.s3.ap-northeast-2.amazonaws.com/reading.svg")
  ratings: [Rating!]! 
  profile: Profile @relation(link: TABLE)
  isAdmin: Boolean
  bookAvgRating: Float
  bookComments: [Comment!] @relation(name: "BookCommentOfUser",onDelete:CASCADE)
  authorComments: [AuthorComment!] @relation(name: "AuthorCommentOfUser",onDelete:CASCADE)
  shelves: [Shelf!] @relation(name: "ShelfOfUser",onDelete:CASCADE)
  likeQuotes: [Quote!] @relation(name: "LikeQuoteOfUser",onDelete:SET_NULL)
  displays: [Display!] @relation(name: "DisplayOfUser",onDelete:CASCADE)
  addedBooks:[Book!] @relation(name: "BookOfUser")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}



type Display {
  id: ID! @id @unique
  user: User @relation(name: "DisplayOfUser",onDelete:SET_NULL)
  book: Book 
  shelves: [Shelf!] @relation(name: "ShelfOfDisplay",onDelete:SET_NULL)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Shelf {
  id: ID! @id @unique
  user: User @relation(name: "ShelfOfUser",onDelete:SET_NULL)
  name: String!
  displays: [Display!] @relation(name: "ShelfOfDisplay",onDelete:CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

type Profile {
  id: ID! @id @unique
  user: User!
  age: Int
  gender: Gender!
  bio: String
  interests: String
  favoriteBook: String
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Tag {
  id: ID! @id @unique
  quotes :[Quote!]  @relation(name: "TagOfQuote",onDelete:SET_NULL)
  term: String! @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
type Comment {
  id: ID! @id @unique
  book: Book @relation(name: "CommentOfBook",onDelete:SET_NULL)
  user: User @relation(name: "BookCommentOfUser",onDelete:SET_NULL)
  text: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
type AuthorComment {
  id: ID! @id @unique
  author: Author @relation(name: "CommentOfAuthor",onDelete:SET_NULL)
  user: User @relation(name: "AuthorCommentOfUser",onDelete:SET_NULL)
  text: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

